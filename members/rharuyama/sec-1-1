#lang racket

; sicp-2017-02
; 1.1 The Element of Programming

; ================================================================================================= Ex.1.7 DONE
(define (sqrt-iter guess x)
  (if (good-enough? guess x)
      guess
      (sqrt-iter (improve guess x)
                 x)))

(define (sqrt-iter-2 guess x)
  (if (good-enough?-2 guess x)
      guess
      (sqrt-iter-2 (improve guess x)
                 x)))

(define (good-enough? guess x)
  (< (abs (- (square guess) x)) 0.001))

(define (good-enough?-2 guess x)
  (< (abs (- 1 (/ guess (improve guess x)))) 0.001))

(define (improve guess x)
  (display guess)
  (newline)
  (average guess (/ x guess)))

(define (average x y)
  (/ (+ x y) 2))

(define (square x)
  (* x x))

